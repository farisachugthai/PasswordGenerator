# -*- coding: utf-8 -*-
"""Form implementation generated from reading ui file `ui/passwordgeneratorwindow.ui`.

Created by: PyQt5 UI code generator 5.15.0

.. warning::

    Any manual changes made to this file will be lost when pyuic5 is
    run again.
    Do not edit this file unless you know what you are doing.

"""
import random
# import secrets
import string
import sys
from string import ascii_lowercase, ascii_uppercase, digits

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox


class Ui_MainWindow(object):
    """The main window of the application.

    .. todo::
        Add in the appropriate properties and methods as we go.

    Properties
    ----------
    textPasswordLength : QtWidgets.QLineEdit

    """

    def setupUi(self, MainWindow):
        """A python based implementation of building a QtApplication."""
        # MainWindow object
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(850, 378)

        # centralwidget object
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # topLabelFrame
        self.topLabelFrame = QtWidgets.QFrame(self.centralwidget)
        self.topLabelFrame.setGeometry(QtCore.QRect(10, 10, 830, 80))
        self.topLabelFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.topLabelFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.topLabelFrame.setObjectName("topLabelFrame")

        # topLabel
        self.topLabel = QtWidgets.QLabel(self.topLabelFrame)
        self.topLabel.setGeometry(QtCore.QRect(0, 5, 821, 71))
        font = QtGui.QFont()
        font.setPointSize(31)
        self.topLabel.setFont(font)
        self.topLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.topLabel.setObjectName("topLabel")

        # formLayoutWidget
        self.formLayoutWidget = QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(310, 100, 253, 161))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.formLayoutWidget.setFont(font)
        self.formLayoutWidget.setObjectName("formLayoutWidget")

        # formLayout
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")

        # labelPasswordLength
        self.labelPasswordLength = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelPasswordLength.setFont(font)
        self.labelPasswordLength.setObjectName("labelPasswordLength")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.labelPasswordLength)

        # textPasswordLength
        self.textPasswordLength = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.textPasswordLength.setFont(font)
        self.textPasswordLength.setMaxLength(2)
        self.textPasswordLength.setObjectName("textPasswordLength")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.textPasswordLength)

        # labelSymbols
        self.labelSymbols = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelSymbols.setFont(font)
        self.labelSymbols.setObjectName("labelSymbols")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.labelSymbols)
        self.checkSymbols = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.checkSymbols.setText("")
        self.checkSymbols.setObjectName("checkSymbols")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.checkSymbols)
        self.labelNumbers = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelNumbers.setFont(font)
        self.labelNumbers.setObjectName("labelNumbers")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.labelNumbers)
        self.checkNumbers = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.checkNumbers.setText("")
        self.checkNumbers.setObjectName("checkNumbers")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.checkNumbers)
        self.labelLowercase = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelLowercase.setFont(font)
        self.labelLowercase.setObjectName("labelLowercase")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.labelLowercase)
        self.checkLowercase = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.checkLowercase.setText("")
        self.checkLowercase.setObjectName("checkLowercase")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.checkLowercase)
        self.labelUppercase = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelUppercase.setFont(font)
        self.labelUppercase.setObjectName("labelUppercase")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.labelUppercase)
        self.checkUppercase = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.checkUppercase.setText("")
        self.checkUppercase.setObjectName("checkUppercase")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.checkUppercase)
        self.verticalLayoutWidget = QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(159, 280, 551, 89))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalButtons = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalButtons.setContentsMargins(0, 0, 0, 0)
        self.verticalButtons.setObjectName("verticalButtons")
        self.textPassword = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.textPassword.setReadOnly(True)
        self.textPassword.setObjectName("textPassword")
        self.verticalButtons.addWidget(self.textPassword)
        self.buttonGenerate = QPushButton(self.verticalLayoutWidget)
        self.buttonGenerate.setObjectName("buttonGenerate")
        self.verticalButtons.addWidget(self.buttonGenerate)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # custom made events
        # self.buttonGenerate.clicked.connect(self.clicked)
        self.checkSymbols.stateChanged.connect(lambda: self.clickBox(self.checkSymbols))
        self.checkNumbers.stateChanged.connect(lambda: self.clickBox(self.checkNumbers))
        self.checkLowercase.stateChanged.connect(lambda: self.clickBox(self.checkLowercase))
        self.checkUppercase.stateChanged.connect(lambda: self.clickBox(self.checkUppercase))
        # self.buttonGenerate.clicked.connect(self.length)
        self.buttonGenerate.clicked.connect(self.generatePassword)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PasswordGeneratorWindow"))
        self.topLabel.setText(_translate("MainWindow", "Password Generator"))
        self.labelPasswordLength.setText(_translate("MainWindow", "Password Length:"))
        self.labelSymbols.setText(_translate("MainWindow", "Symbols:"))
        self.labelNumbers.setText(_translate("MainWindow", "Numbers:"))
        self.labelLowercase.setText(_translate("MainWindow", "Lowercase:"))
        self.labelUppercase.setText(_translate("MainWindow", "Uppercase:"))
        self.buttonGenerate.setText(_translate("MainWindow", "Generate Password"))

    def messagebox(self, title, text, icon):
        msgbox = QMessageBox()
        msgbox.setWindowTitle(title)
        msgbox.setText(text)
        msgbox.setIcon(icon)
        msgbox.setStandardButtons(QMessageBox.Ok)
        msgbox.buttonClicked.connect(self.popup)

        # does this need to get assigned to x?
        # x = msgbox.exec_()
        msgbox.exec_()

    def popup(self, i):
        print(i.text())

    def createSymbols(self):
        """Use string.punctuation to generate symbols."""
        # return ["!", "$", "&", "^", "@"]
        return string.punctuation

    def createNumbers(self):
        return digits

    def createLowercase(self):
        return ascii_lowercase

    def createUppercase(self):
        return ascii_uppercase

    def generateValidCharacters(self):
        """Generates all the valid characters in the password.

        .. note::
            Checks that at least one box is checked.

        Returns
        -------
        listPassword : list

        """
        # listPassword is the combination of valid characters
        listPassword = []

        if self.checkSymbols.isChecked() is True:
            symbol = self.createSymbols()
            listPassword.extend(list(symbol))

        if self.checkNumbers.isChecked() is True:
            number = self.createNumbers()
            listPassword.extend(list(number))

        if self.checkLowercase.isChecked() is True:
            lowercase = self.createLowercase()
            listPassword.extend(list(lowercase))

        if self.checkUppercase.isChecked() is True:
            uppercase = self.createUppercase()
            listPassword.extend(list(uppercase))
        return listPassword

    def generatePassword(self):
        """Generate the password for the app.

        .. todo::
            Swap out for loop with list comprehension with secrets lib.

        >>> import secrets, string
        >>> alphabet = string.ascii_letters
        >>> pword = int(self.textPasswordLength.text())
        >>> password = ''.join(secrets.choice(alphabet) for i in range(pword))

        """
        if (self.textPasswordLength.text() == ""):
            self.messagebox("Input Error", "Enter A Value from (8 - 32)", QMessageBox.Critical)
        else:
            try:
                length = int(self.textPasswordLength.text())

                if not (8 <= length <= 99):
                    self.messagebox(
                        "Input Error",
                        "Enter A Value from (8 - 99)", QMessageBox.Critical
                    )
                else:
                    listPassword = self.generateValidCharacters()
                    if len(listPassword) == 0:
                        self.messagebox(
                            "Password Error",
                            "Select one of the checkboxes to generate a password.",
                            QMessageBox.Critical
                        )
                    else:
                        newPassword = []
                        lengthList = len(listPassword)
                        for i in range(length):
                            index = random.randint(0, lengthList - 1)
                            newPassword.append(listPassword[index])
                        generated = "".join(newPassword)
                        self.textPassword.setText(generated)
            except ValueError:
                self.messagebox("Input Error", "Enter A Value from (8 - 32)", QMessageBox.Critical)

            except:  # noqa
                self.messagebox("Unknown Error", "Please report on GitHub.", QMessageBox.Critical)

    def clickBox(self, state):
        if state.isChecked() is True:
            print(state, 'Checked')
        else:
            print(state, 'Unchecked')


def main():
    app = QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
